from __future__ import division
import math
import matplotlib.pyplot as plt
import numpy as np

map = {0: {'p': -1, 'e': 1},
            1: {'b': 1, 'c': 2, 'x': 3, 'f': 4, 'k': 5, 's': 6},
            2: {'f': 1, 'g': 2, 'y': 3, 's': 4},
            3: {'n': 1, 'b': 2, 'c': 3, 'g': 4, 'r': 5, 'p': 6, 'u': 7, 'e': 8, 'w': 9, 'y': 10},
            4: {'t': 1, 'f': 2},
            5: {'a': 1, 'l': 2, 'c': 3, 'y': 4, 'f': 5, 'm': 6, 'n': 7, 'p': 8, 's': 9},
            6: {'a': 1, 'd': 2, 'f': 3, 'n': 4},
            7: {'c': 1, 'w': 2, 'd': 3},
            8: {'b': 1, 'n': 2},
            9: {'k': 1, 'n': 2, 'b': 3, 'h': 4, 'g': 5, 'r': 6, 'o': 7, 'p': 8, 'u': 9, 'e': 10, 'w': 11, 'y': 12},
            10: {'e': 1, 't': 2},
            11: {'b': 1, 'c': 2, 'u': 3, 'e': 4, 'z': 5, 'r': 6, '?': 7},
            12: {'f': 1, 'y': 2, 'k': 3, 's': 4},
            13: {'f': 1, 'y': 2, 'k': 3, 's': 4},
            14: {'n': 1, 'b': 2, 'c': 3, 'g': 4, 'o': 5, 'p': 6, 'e': 7, 'w': 8, 'y': 9},
            15: {'n': 1, 'b': 2, 'c': 3, 'g': 4, 'o': 5, 'p': 6, 'e': 7, 'w': 8, 'y': 9},
            16: {'p': 1, 'u': 2},
            17: {'n': 1, 'o': 2, 'w': 3, 'y': 4},
            18: {'n': 1, 'o': 2, 't': 3},
            19: {'c': 1, 'e': 2, 'f': 3, 'l': 4, 'n': 5, 'p': 6, 's': 7, 'z': 8},
            20: {'k': 1, 'n': 2, 'b': 3, 'h': 4, 'r': 5, 'o': 6, 'u': 7, 'w': 8, 'y': 9},
            21: {'a': 1, 'c': 2, 'n': 3, 's': 4, 'v': 5, 'y': 6},
            22: {'g': 1, 'l': 2, 'm': 3, 'p': 4, 'u': 5, 'w': 6, 'd': 7}
            }


def randomize_data(X): #part a
    np.random.seed(0)
    np.random.shuffle(X)
    num_train = int(math.floor(0.90 * X.shape[0]))
    num_test = X.shape[0] - num_train
    X_train = X[:num_train, :]
    X_test = X[-num_test:, :]

    return X_train, X_test





if __name__ == "__main__":

    with open("/Users/niralshah/Desktop/agaricus-lepiota.data") as f:
        lines = f.read().splitlines()
    X = np.zeros((len(lines),23))

    for i, line in enumerate(lines):
        c = line.split(',')
        #print(c)
        X[i,0] = map[0][c[0]]
        for j in xrange(1,23):
            #print c[j]
            X[i,j] = map[j][c[j]]-1


    print X
    [X_train, X_test] = randomize_data(X);

    #plot features:

    features = [2,3]
    n = X_train.shape[0]
    neg = (X_train[:,0] == -1).sum()
    pos = (X_train[:,0] == 1).sum()
    p_neg = neg / n;
    p_pos = pos / n;

    print(neg);
    print(pos);
    for k in features:
        n_val = len(map[k-1].keys())

        feat_neg = np.zeros(n_val);
        feat_pos = np.zeros(n_val);

        for c in xrange(n_val):
            feat_neg[c] = ((X_train[:,0] == -1) & (X_train[:,k] == c)).sum()/neg;
            feat_pos[c] = ((X_train[:, 0] == 1) & (X_train[:, k] == c)).sum()/pos;

        plt.subplot('121')
        plt.bar(range(n_val), feat_neg, width=1.0)
        plt.title('Poisonous Feature # {}'.format(k))
        plt.xlabel('Feature Value (mapped)')
        plt.ylabel('Normalized Occurrence')
        plt.ylim(0.0, 1.05)
        plt.xticks(range(n_val))

        plt.subplot('122')
        plt.bar(range(n_val), feat_pos, width=1.0)
        plt.title('Edible Feature # {}'.format(k))
        plt.xlabel('Feature Value')
        plt.ylabel('Normalized Occurrence')
        plt.ylim(0.0, 1.05)
        plt.xticks(range(n_val))

        plt.show()

    m, n = X_test.shape

    est_p_neg = np.zeros((m,n-1))
    est_p_pos = np.zeros((m, n-1))

    for z in xrange(1,23):
        n_val = len(map[z].keys())
        feat_neg = np.zeros(n_val);
        feat_pos = np.zeros(n_val);

        for w in xrange(n_val):
            feat_neg[w] = ((X_train[:, 0] == -1) & (X_train[:, z] == w)).sum()/neg
            feat_pos[w] = ((X_train[:, 0] == 1) & (X_train[:, z] == w)).sum()/pos
        print feat_neg
        print feat_pos

        for i,x in enumerate(X_test):
            id = int(x[z])
            est_p_neg[i,z-1] = float(feat_neg[id])
            est_p_pos[i,z-1] = float(feat_pos[id])


    mapY = np.zeros(X_test.shape[0])
    print p_neg
    print p_pos
    for i in xrange(m):
        if p_neg * np.prod(est_p_neg[i, :]) >= p_pos * np.prod(est_p_pos[i, :]):
            mapY[i] = -1
        else:
            mapY[i] = 1

    print mapY
    print X_test[:,0]
    accuracy = ((mapY == X_test[:, 0].astype(int)).sum())
    print accuracy, m, accuracy /m








